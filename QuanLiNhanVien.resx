<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABILAAASCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANzc
        3AKnp6cGcHBwD0tKShw/Pj4pPj49MD4+PTA+PT0rRUVFHWxsaw+mpqYF4ODgAgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8fHxAbe3
        twVkZGMTJyYlNRsaGW4lIh+hMSsnwzgxLNU7My7cOTIt2zErJ9MgHRq/FRQTmRcWFl8sLCwrfX19C9nZ
        2QIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADv7+8B7u7uAerq
        6gGgoJ8HHx0cTysnI7FGPTbnXlFH9mZYTfpnWU/7aFlP/GZZTvxjVUz9XVFH/D00LvtBODL5Miwo8zYy
        McwYFxd7JycnKpiYmAbt7e0BAAAAAAAAAAAAAAAAAAAAAAAAAADr6+sB1NTUA52cnAd6eXgPZ2VjGmdk
        YiFnZWIjYmBeITw6ODRTSEDwaVtQ+XFhVvx1ZVn9d2da/nhnW/53Z1r+dGVY/m9gVf5XTEP+TEI6/k1D
        PP5aUUz+xbi1+19XVPYcGRfAExMSUWJiYg7m5uYCAAAAAAAAAADg4OACkI+OCUpHRR0hHBhDIBkSeTEh
        EaRBKRK+Si4Sy0ouEs1CKA/IMSEQx2paTvp5aVz+fm1g/oFvYv6DcWP+g3Fj/oFwYv59bV/+bl9T/lNH
        P/5YTEP+WE1F/oh/e/7Wysf+hHp2/kc9N/ofGxjgEBAPbFBQUBLg4OAC29rZAzEuKyMjGhF/SS0Tx25A
        F/CMURv3lFUd+ZZWHPuWVhv8lFUZ+5BSF/t/TBn8dGFS/oZ0Z/6MeWz+jnxt/o98bv6Pe23+jXlr/oBu
        Yv5fUkj+aFpP/mFVS/5eU0v+wri2/t/U0f6SiIT+TUM9/TozLfwvKSXoEREQblZWVhC4tbMIVjkgvY5S
        HPacWiH7o18l/qdiJv2pYif+qWIm/qdhJf6lYCP+ol0f/pZZIv5/bFz+p5mO/q2ek/6qm5D+pZWK/p2M
        f/6VgnX+inlr/mNWTP5wYVb+bWBW/oF4c/7l3dr+5tzZ/pyTj/5XTET+QDcw/kk/OPssJiLiCQgIR7i0
        sQt8TyrbpWAn/K5mK/6xaC7+smkv/rNqMP6yaS/+sWgu/q5mK/6qYyj+omEo/oJqVv66r6b+v7Ss/r2y
        qf64rKP+p5uT/pOHf/5/cmf+ZVhP/nJkWP5yZl3+zMfE/u7n5P7p4t/+pJyY/mFVTP5DOjP+TkQ7/UQ7
        NPQLCwpav7u3C4FVMdiuaDH9uHA3/rtxOv69cjr+vnI6/rxxOf66bzf+t200/rNqMP6qZi7+hWNF/r2x
        p/7Hvrf+xby0/rivqP6qoZr+tKee/qqckf6WhXj+h3dr/qagnP7u6ej+9O7s/uzl4/6qop7+ZFdP/kM6
        Mv5MQzr9OjMu5kFBQCHX09AJflc4yMCEV/vLjF/+zItd/syGV/7Kf0z+x3pF/sV3Qv7BdD3+vHA4/rNs
        Nf6OXTb+sqSa/svDvf7Lw7z+s6yn/sW7tP7Ata3+t6qh/q2flf6Zko3+7+zq/vby8f728fD+7ujm/q6m
        of51Z13+UEU9/kQ7NPkrJySikpGRCu7r6Qd6W0Wm0KKB+d2qiP7dp4T+3aN+/tueeP7YlGn+0YVU/sp8
        R/7EdkH+vHRA/pp3Xf6XjIT+zsbA/r64tP7QycT+zsa//se9t/6/tK3+raai/u3r6v739vT++ff2/vfz
        8v7v6ej+sKik/oBwZP5lWE39PjYw8y4tLUHf3t4D8vHwBY17b3PUoYD35LOV/uayk/7mro3+5aqH/uOk
        f/7fnXX+1otd/sx/Tf6vdU/+0cfB/ru0sf6zq6T+yMO//tjSzf7Tzcf+x8K9/qmrqf7M1Nb+1t/i/unv
        8f7v8fH+8/Hw/u7p5/6upqH+g3Jn/WdZT/osKSWtjY2NC/Ly8gH39vYCrqilLsOPb/Pmt5z97Lqe/uy2
        mf7sspP+6q2L/ueng/7gn3n+yYhh/sOyqf7x7On+7+rp/paSkP7LxcD+1tPQ/sfJx/6Stb3+b7jM/mXE
        3f5dv9r+Q5+3/nigq/7X3d/+5ePi/qeemf5/bmP8VEtC50VERC7n5+cDAAAAAAAAAADh3twIkGxXueS1
        m/rwwKb+8r6j/vK6nf7wtZb+66+P/uCnh/7GtKr+9vLv/vj29f718vH+6eXk/pybmf6jsLD+jM/g/n/d
        9/5z3Pn+aNr6/lvX+f47zvb+H8Ty/jeVrv63v8H+ko2I+2xgVvM1MzBazMzLBQAAAAAAAAAAAAAAAI+O
        jQNmXVhCy5R28+/Bqf33xav+98Gn/vG7n/7isJb+w7Wt/uzt7f7u8vL+8/P0/vXz8v7r6un+qra5/la5
        0/6Q4/n+ieX9/oDj/v524f7+a9/+/lTa/f4fzPv+HMf3/iyMpv1XW1ryNjUzZ7u7ugf09PMBAAAAAAAA
        AAAAAAAAAAAAAKKfnQdXPjGP4KqP+PPFrvz1xrD+37un/o6en/6Dt8X+ebfH/nmvvv6WrLL+2+Lk/tfd
        3v5Xp7z+l+P4/pvp/P6W6f7+juf+/oTl/v564v7+a+D+/jbU/v4fzfz+Gb/s/Aw/TcJDSEkf5ubmAgAA
        AAAAAAAAAAAAAAAAAAAAAAAAoqGhAhwYFg1iRDSt36+Y+cC8tf6Hy93+d9r1/mrZ9/5g1/j+UNL3/iPB
        7P42kan+b5CZ/nrY8P6s6/z+q+3+/qPs/v6b6v7+kuj+/ojm/v574/7+XN3+/irS/v4fyPb9FI6u7xci
        JUnOzs4DAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEhIRBA4QEBk7WV7XhNfs/Yni+v5+4v3+dOH+/mrf
        /v5c2/3+Kc37/hrD8v4pnbv+qeb1/rvx/v628P7+r+/+/qft/v6f6/7+len+/ovn/v575P7+Sdn+/inQ
        +/0duuX3FS41g6CiowcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQFBUFCyEmYlO71vaW4/f9lOf9/ovm
        /v6C5P7+eeL+/mzf/v5G1/7+Icn3/kGvy/6+7Pj+x/P+/sHy/v668f7+s/D+/qvu/v6i7P7+l+r+/ovn
        /v545P7+Rdj+/ifC6/kZTVukio6ODAAAAAAAAAAAAAAAAAAAAAAAAAAAoKCgARQbHBAoeI3TmuDy+6br
        /f6g6/7+mOn+/pDo/v6G5f7+e+P+/mjf/v4wzvf+WLfQ/sfv+P7Q9f7+yvT9/sTy/P698Pv+tu/9/q3v
        /f6j7f7+mOr+/orn/v554/7+Uc3t+h5aaayKj5ANAAAAAAAAAAAAAAAAAAAAAAAAAACgoqIDGicqSGjD
        2vWx7Pv+s+/+/qzu/v6l7P7+nev+/pTp/v6K5v7+fOT+/lbX+P5Zt87+zvD4/tf1/P7R8vn+x+Xr/r7b
        4f642+P+tuz3/q3t/P6i7P7+lur+/obm/v5n0e36HlNho5CUlQsAAAAAAAAAAAAAAAAAAAAAAAAAAKGk
        pQUnTVZ+l9rr+MDx/f6+8f7+t/D+/rDv/v6p7v7+oOz+/pbq/v6K5/7+et73/lSyyP7O6/P+2Ofq/tHX
        2P7Lzs/+w8bG/rm+vv6vvsD+seDp/qvr+f6g6/3+j+f7/mPN5/oXNDySYmRlDwAAAAAAAAAAAAAAAAAA
        AAAAAAAAoqaoBjFlc5i04u75y/T+/sf0/v7B8/7+u/H+/rTw/v6r7/7+ou3+/pfq/v6G3vP+XJmn/rPB
        xP7f4OH+2tvb/tLS0v7Kysr+wcLC/ri6uv6ttLX+qMvS/qXj8P6W3+/+Vpen+xoiI9dAQUEfAAAAAAAA
        AAAAAAAAAAAAAAAAAACip6gHNWp3mr7l7/rU9v3+0PT8/sry/P7D8fv+vO/6/rXv+/6t7vz+ouz+/pHd
        8P5hdXr+1djZ/uXl5f7g4OD+2dnZ/tLS0v7Jycn+wMDA/ra3t/6sr7D+nqao/o+Ymv1zeHn5IyUmwnZ2
        dg4AAAAAAAAAAAAAAAAAAAAAAAAAAKGlpgUwWWOHtODs+Nj1/P7T7fP+xuLr/rrZ4/6x0t7+rtTf/rLp
        9v6r7fz+nOLy/mN3e/7Jzc7+4+Pk/uPj4/7g4OD+2NjY/tDQ0P7Hx8f+vr6+/rOzs/6lpaX+kpKS/EVF
        Re8zMzNE29vbBAAAAAAAAAAAAAAAAAAAAAAAAAAAoaOjBCM0OFuWz9331Onw/tHp8/7J5fP+wODu/rbZ
        6f6s0+P+pcnV/qzf6/6k5fP+i8fW/l92e/6UmJn+zc7P/dna2v3Z2dn+1dXV/s3Nzf7CwsL+tLS0/Z2d
        nftSUlLwMTExYsDAwAb19fUBAAAAAAAAAAAAAAAAAAAAAAAAAACgo6QFITA2YHyswvja7/j+2O/5/tDr
        9/7H5vP+vt/u/rTY6P6p0OH+oMXU/p3H1P6WyNX+ga+9/Tlca/s9REjjf39/87KysvbHx8f5x8fH+a2t
        rfiAgID1Q0ND0FZWVkbPz88G9PT0AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCjpAUlU2idvNjk+N3w
        +f7f8/v+1+/6/s/q9/7G5PL+vN3s/rHV5f6nzNz+nMLT/o+3yP55obT7K1pw8C0xND+9vb0qm5ubcIOD
        g5p2dnaheXl5jYeHh1G6uroN7u7uBPf39wEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoKOkAxsu
        NldYnrzvwuHv+tnv+P3Z8Pv+1e75/s7p9f7E4u/+utro/q/R4P6hxdX+jrPE/EZ5j/UZKTB5rrCxCPDw
        8AP19fUE8fHxBvDw8Afw8PAG8/PzA/j4+AEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AACgoaEBEhYXBgoVGTokXne5b7TS9LTa6/nN5vL9y+by/cXi7/662ej+rM3c/pC2x/o8cIfyESQtfWVo
        aQnt7e0BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAADA8QAxAVFwgXIic/JlVqn1KRrOiBu9b0kcPa9YK2zvVXjKXyIkpcvBMb
        H0QaHB0Gurq7AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHV3dwN3e30HeoGEFH+IjESCkplagIyRU3uB
        gyh3e3wIdXZ3BIGBgQEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//wAP//gAA//AAAD4AAAAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAYAAAAOAAAADwAAAB8AAAAfgAAAH4AAAB8AAAAfAAAAHwAAAB8AAAAfAAAAHwAAAB8AA
        AAfAAAAPwAAAH8AAAH/AAD//8AB///wA//8=
</value>
  </data>
</root>